{"version":3,"sources":["components/Input.tsx","components/CleverButtons.tsx","components/BlockSettings.tsx","components/WindowCounter.tsx","components/BlockWindow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","className","classNameBlock","title","type","value","onChange","e","inputValue","currentTarget","setDisabled","classNameInput","CleverButtons","disabled","onClick","settings","BlockSettings","setInputStartValue","startValue","maxValue","countValue","count","setInputMaxValue","set","WindowCounter","BlockWindow","inputStartValue","inc","inputMaxValue","res","App","React","useState","Number","localStorage","getItem","setCount","setItem","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dd7b8f6.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\n\ntype InputPropsType = {\n    title: string\n    classNameInput: string\n    classNameBlock: string\n    inputValue: (value: number) => void\n    value: number\n    setDisabled: (boolean: boolean) => void\n    startValue: number\n    maxValue: number\n    countValue: number\n}\n\nexport function Input(props: InputPropsType) {\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.inputValue( +e.currentTarget.value)\n        props.setDisabled(false)\n    }\n\n\n    return  <div className={'inputValues'}>\n        <div className={props.classNameBlock}> {props.title} </div>\n        <input type=\"number\" value={props.value} onChange={onChangeHandler} className={props.classNameInput}/>\n    </div>\n}","import React from \"react\";\n\ntype CleverButtonsPropsType = {\n    title:string\n    settings:() => void\n    setDisabled:(boolean: boolean) => void\n    disabled:boolean\n    count:number\n    maxValue:number\n}\n\nexport function CleverButtons(props:CleverButtonsPropsType) {\n\n    return <button className={'buttons'} disabled={props.disabled  }  onClick={props.settings}>{ props.title }</button>\n\n}","import React from \"react\";\nimport { Input } from \"./Input\";\nimport { CleverButtons } from \"./CleverButtons\";\n\ntype BlockSettingsPropsType = {\n  setInputStartValue: (value: number) => void;\n  setInputMaxValue: (value: number) => void;\n  startValue: number;\n  maxValue: number;\n  set: () => void;\n  disabled: boolean;\n  setDisabled: (boolean: boolean) => void;\n  count: number;\n};\n\nexport function BlockSettings(props: BlockSettingsPropsType) {\n  return (\n    <div className={\"wrapper\"}>\n      <div className={\"blockValues settings\"}>\n        <Input\n          title={\"Start Value\"}\n          classNameInput={\"inputStart\"}\n          classNameBlock={\"startValue\"}\n          inputValue={props.setInputStartValue}\n          startValue={props.startValue}\n          maxValue={props.maxValue}\n          setDisabled={props.setDisabled}\n          countValue={props.count}\n          value={props.startValue}\n        />\n\n        <Input\n          title={\"Max Value\"}\n          classNameInput={\"inputMax\"}\n          classNameBlock={\"maxValue\"}\n          inputValue={props.setInputMaxValue}\n          startValue={props.startValue}\n          maxValue={props.maxValue}\n          countValue={props.count}\n          setDisabled={props.setDisabled}\n          value={props.maxValue}\n        />\n      </div>\n\n      <div className={\"blockSettings\"}>\n        <CleverButtons\n          title={\"Set\"}\n          settings={props.set}\n          setDisabled={props.setDisabled}\n          disabled={\n            props.startValue === props.maxValue ||\n            props.startValue > props.maxValue ||\n            props.startValue < 0 ||\n            props.maxValue < 0\n              ? !props.disabled\n              : props.disabled\n          }\n          maxValue={props.maxValue}\n          count={props.count}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\ntype WindowCounterPropsType = {\n  startValue: number;\n  count: number;\n  maxValue: number;\n  disabled: boolean;\n};\n\nexport function WindowCounter(props: WindowCounterPropsType) {\n  return (\n    <div\n      className={\n        props.count < props.maxValue\n          ? \"blockValues window startValue\"\n          : \"blockValues window max\"\n      }\n    >\n      {\" \"}\n      {!props.disabled ? props.count : \"Change Value and Set\"}{\" \"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {CleverButtons} from \"./CleverButtons\";\nimport {WindowCounter} from \"./WindowCounter\";\n\ntype BlockWindowPropsType = {\n    inc: () => void\n    res: () => void\n    inputStartValue: number\n    inputMaxValue:number\n    count: number\n    setDisabled: (boolean: boolean) => void\n    disabled: boolean\n    maxValue:number\n}\n\nexport function BlockWindow(props: BlockWindowPropsType) {\n\n    return <div className={'wrapper'}>\n\n        <WindowCounter startValue={props.inputStartValue}  count={props.count} maxValue={props.maxValue} disabled={props.disabled}/>\n\n        <div className={'blockSettings'}>\n\n            <CleverButtons title={'Inc'}\n                           settings={props.inc}\n                           setDisabled={props.setDisabled}\n                           disabled={props.count >= props.inputMaxValue || props.disabled}\n                           count={props.count}\n                           maxValue={props.inputMaxValue}\n            />\n\n            <CleverButtons title={'Res'}\n                           settings={props.res}\n                           setDisabled={props.setDisabled}\n                           disabled={props.count <= props.inputStartValue || props.disabled}\n                           count={props.count}\n                           maxValue={props.inputMaxValue}\n            />\n\n        </div>\n    </div>\n}\n\n","import React from \"react\";\nimport \"./App.css\";\nimport { BlockSettings } from \"./components/BlockSettings\";\nimport { BlockWindow } from \"./components/BlockWindow\";\n\nfunction App() {\n  const [inputStartValue, setInputStartValue] = React.useState(\n    Number(localStorage.getItem(\"start\"))\n  );\n  const [inputMaxValue, setInputMaxValue] = React.useState(\n    Number(localStorage.getItem(\"max\"))\n  );\n\n  const [count, setCount] = React.useState(inputStartValue);\n\n  const [disabled, setDisabled] = React.useState(true);\n\n  function inc() {\n    count < inputMaxValue && setCount(count + 1);\n\n    localStorage.setItem(\"count\", count.toString());\n  }\n\n  function res() {\n    setCount(inputStartValue);\n  }\n\n  function set() {\n    setCount(inputStartValue);\n    setDisabled(true);\n\n    localStorage.setItem(\"start\", inputStartValue.toString());\n    localStorage.setItem(\"max\", inputMaxValue.toString());\n  }\n\n  return (\n    <div className={\"App\"}>\n      <BlockSettings\n        setInputStartValue={setInputStartValue}\n        setInputMaxValue={setInputMaxValue}\n        startValue={inputStartValue}\n        maxValue={inputMaxValue}\n        set={set}\n        disabled={disabled}\n        setDisabled={setDisabled}\n        count={count}\n      />\n\n      <BlockWindow\n        inc={inc}\n        res={res}\n        inputStartValue={inputStartValue}\n        inputMaxValue={inputMaxValue}\n        count={count}\n        setDisabled={setDisabled}\n        disabled={!disabled}\n        maxValue={inputMaxValue}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n        <App/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}