{"version":3,"sources":["components/Input.tsx","components/CleverButtons.tsx","Redux/countReducer.ts","components/BlockSettings.tsx","components/WindowCounter.tsx","components/BlockWindow.tsx","App.tsx","serviceWorker.ts","Redux/redux-store.ts","index.tsx"],"names":["Input","React","memo","props","className","classNameBlock","title","type","value","checkCondition","classNameInput","onChange","e","setDisabled","onChangeCallback","currentTarget","CleverButtons","disabled","disable","onClick","onClickHandler","initialState","startValue","maxValue","countValue","BlockSettings","action","useDispatch","condition","inputValue","WindowCounter","BlockWindow","App","useState","useSelector","state","count","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAaaA,G,MAAQC,IAAMC,MAAM,SAACC,GAO9B,OAAO,yBAAKC,UAAW,eACnB,yBAAKA,UAAWD,EAAME,gBAAtB,IAAwCF,EAAMG,MAA9C,KACA,2BAAOC,KAAK,SAASC,MAAOL,EAAMK,MAAOJ,UAAWD,EAAMM,eAAiB,iBAAmBN,EAAMO,eAAgBC,SAPhG,SAACC,GACrBT,EAAMU,aAAY,GAClBV,EAAMW,kBAAkBF,EAAEG,cAAcP,eCTnCQ,EAAgBf,IAAMC,MAAK,SAACC,GACrC,OAAO,4BAAQC,UAAW,UAAWa,SAAUd,EAAMe,QAASC,QAAS,kBAAMhB,EAAMiB,mBAAmBjB,EAAMG,U,cCH1Ge,EAAiC,CACnCC,WAAY,EACZC,SAAU,EACVC,WAAY,GCGHC,EAAgBxB,IAAMC,MAAK,SAACC,GAErC,IAAMuB,EAASC,cAYTC,EAAYzB,EAAMmB,WAAa,GAAKnB,EAAMmB,WAAanB,EAAMoB,UAAYpB,EAAMmB,aAAenB,EAAMoB,SADnF,kBAC+G,GAEtI,OAAO,yBAAKnB,UAAW,WACnB,yBAAKA,UAAW,wBAEZ,kBAACJ,EAAD,CAAOM,MAAO,cACPI,eAAgB,aAChBI,iBAjBc,SAACe,GAAD,OAAwBH,EDiD9C,CAACnB,KAAM,qBAAsBe,WCjD4CO,KAkBjExB,eAAgB,aAChBG,MAAOL,EAAMmB,WACbT,YAAaV,EAAMU,YACnBJ,eAAgBmB,IAGvB,kBAAC5B,EAAD,CAAOM,MAAO,YACPI,eAAgB,WAChBI,iBAxBY,SAACe,GAAD,OAAwBH,EDmD5C,CAACnB,KAAM,mBAAoBgB,SCnD0CM,KAyB7DxB,eAAgB,WAChBG,MAAOL,EAAMoB,SACbV,YAAaV,EAAMU,YACnBJ,eAAgBmB,KAK3B,yBAAKxB,UAAW,iBAEZ,kBAACY,EAAD,CAAeV,MAAO,MACPY,QAASf,EAAMmB,aAAenB,EAAMoB,UACjCpB,EAAMmB,WAAanB,EAAMoB,UACzBpB,EAAMmB,WAAa,GACnBnB,EAAMoB,SAAW,EACpBH,eAtCH,WAChBM,EDoDG,CAACnB,KAAM,eCnDVJ,EAAMU,aAAY,WCbbiB,EAAgB7B,IAAMC,MAAM,SAACC,GAEtC,IAAMyB,EAAYzB,EAAMmB,WAAa,GAAKnB,EAAMmB,WAAanB,EAAMoB,UAAYpB,EAAMmB,aAAenB,EAAMoB,SAE1G,OAAO,yBAAKnB,UAAW,sBACnB,0BAAMA,UAAWD,EAAMqB,WAAarB,EAAMoB,SAAY,aAAe,YAAaK,EAAY,kBAAoBzB,EAAMqB,gBCDnHO,EAAc9B,IAAMC,MAAK,SAACC,GAEnC,IAAMuB,EAASC,cAIf,OAAO,yBAAKvB,UAAW,WAEnB,kBAAC0B,EAAD,CAAeR,WAAYnB,EAAMmB,WAAYE,WAAYrB,EAAMqB,WAAYD,SAAUpB,EAAMoB,WAE3F,yBAAKnB,UAAW,iBAEZ,kBAACY,EAAD,CAAeV,MAAO,MAAOY,QAASf,EAAMqB,YAAcrB,EAAMoB,UAAYpB,EAAMc,SAAUG,eAT1E,kBAAMM,EHyCzB,CAACnB,KAAM,uBG/BN,kBAACS,EAAD,CAAeV,MAAO,MAAOY,QAASf,EAAMqB,YAAcrB,EAAMmB,YAAcnB,EAAMc,SAAUG,eAT5E,kBAAMM,EH4CzB,CAACnB,KAAM,wBItCHyB,MAff,WAAgB,IAAD,EAEoB/B,IAAMgC,UAAS,GAFnC,mBAEJhB,EAFI,KAEKJ,EAFL,KAILW,EAAaU,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,MAAMZ,cACrED,EAAWW,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,MAAMb,YACnED,EAAaY,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,MAAMd,cAG3E,OAAO,yBAAKlB,UAAW,OACnB,kBAACqB,EAAD,CAAeZ,YAAaA,EAAaS,WAAYA,EAAYC,SAAUA,IAC3E,kBAACQ,EAAD,CAAad,SAAUA,EAAUK,WAAYA,EAAYC,SAAUA,EAAUC,WAAYA,MCP7Ea,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCdAC,EAAcC,YAAgB,CAChCP,MNewB,WAAiE,IAAhED,EAA+D,uDAAvDd,EAAcK,EAAyC,uCAExF,OAAQA,EAAOnB,MACX,IAAK,kBACD,OAAO,eACA4B,EADP,CAEIX,WAAYW,EAAMX,WAAa,IAEvC,IAAK,cACD,OAAO,eACAW,EADP,CAEIX,WAAYW,EAAMb,aAE1B,IAAK,qBACD,OAAO,eACAa,EADP,CAEIb,WAAYI,EAAOJ,aAE3B,IAAK,mBACD,OAAO,eACAa,EADP,CAEIZ,SAAUG,EAAOH,WAEzB,IAAK,aACD,OAAO,eACAY,EADP,CAEIX,WAAYW,EAAMb,WAClBC,SAAUY,EAAMZ,WAGxB,QACI,OAAOY,MM3CNS,EAAQC,YAAYH,GCAjCI,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,SF+HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f243e58.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\n\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    classNameInput: string\r\n    classNameBlock: string\r\n    value: number\r\n    onChangeCallback: (inputValue: number) => void\r\n    setDisabled:(boolean: boolean) => void\r\n    checkCondition:string\r\n}\r\n\r\nexport const Input = React.memo( (props: InputPropsType) => {\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        props.setDisabled(true)\r\n        props.onChangeCallback(+e.currentTarget.value)\r\n    }\r\n\r\n    return <div className={'inputValues'}>\r\n        <div className={props.classNameBlock}> {props.title} </div>\r\n        <input type=\"number\" value={props.value} className={props.checkCondition ? 'incorrectValue' : props.classNameInput} onChange={onChangeHandler}/>\r\n    </div>\r\n})","import React from \"react\";\r\n\r\ntype CleverButtonsPropsType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n    disable: boolean\r\n}\r\n\r\nexport const CleverButtons = React.memo((props: CleverButtonsPropsType) => {\r\n    return <button className={'buttons'} disabled={props.disable} onClick={() => props.onClickHandler()}>{props.title}</button>\r\n})","export type initialStateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    countValue: number\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    startValue: 2 ,\r\n    maxValue: 5,\r\n    countValue: 1,\r\n}\r\n\r\ntype ActionType =\r\n    ReturnType<typeof incrementAC>\r\n    | ReturnType<typeof resetAC>\r\n    | ReturnType<typeof changedStartValueAC>\r\n    | ReturnType<typeof changedMaxValueAC>\r\n    | ReturnType<typeof setValuesAC>\r\n\r\n\r\nexport const countReducer = (state = initialState, action: ActionType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"INCREMENT-VALUE\":\r\n            return {\r\n                ...state,\r\n                countValue: state.countValue + 1,\r\n            }\r\n        case \"RESET-VALUE\":\r\n            return {\r\n                ...state,\r\n                countValue: state.startValue\r\n            }\r\n        case \"CHANGE-START-VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"CHANGE-MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        case \"SET-VALUES\":\r\n            return {\r\n                ...state,\r\n                countValue: state.startValue,\r\n                maxValue: state.maxValue\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const incrementAC = () => {\r\n    return {type: 'INCREMENT-VALUE'} as const\r\n}\r\n\r\nexport const resetAC = () => {\r\n    return {type: 'RESET-VALUE'} as const\r\n}\r\n\r\nexport const changedStartValueAC = (startValue: number) => {\r\n    return {type: 'CHANGE-START-VALUE', startValue} as const\r\n}\r\n\r\nexport const changedMaxValueAC = (maxValue: number) => {\r\n    return {type: 'CHANGE-MAX-VALUE', maxValue} as const\r\n}\r\n\r\nexport const setValuesAC = () => {\r\n    return {type: 'SET-VALUES'} as const\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Input} from \"./Input\";\r\nimport {CleverButtons} from \"./CleverButtons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changedMaxValueAC, changedStartValueAC, setValuesAC} from \"../Redux/countReducer\";\r\n\r\ntype BlockSettingsPropsType = {\r\n    setDisabled: (boolean: boolean) => void\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const BlockSettings = React.memo((props: BlockSettingsPropsType) => {\r\n\r\n    const action = useDispatch()\r\n\r\n    const onChangeHandlerStart = (inputValue: number) => action(changedStartValueAC(inputValue))\r\n\r\n    const onChangeHandlerMax = (inputValue: number) => action(changedMaxValueAC(inputValue))\r\n\r\n    const setCallback = () => {\r\n        action(setValuesAC())\r\n        props.setDisabled(false)\r\n    }\r\n\r\n    const incorrectValue = 'Incorrect Value'\r\n    const condition = props.startValue < 0 || props.startValue > props.maxValue || props.startValue === props.maxValue ? incorrectValue : ''\r\n\r\n    return <div className={'wrapper'}>\r\n        <div className={'blockValues settings'}>\r\n\r\n            <Input title={'Start Value'}\r\n                   classNameInput={'inputStart'}\r\n                   onChangeCallback={onChangeHandlerStart}\r\n                   classNameBlock={'startValue'}\r\n                   value={props.startValue}\r\n                   setDisabled={props.setDisabled}\r\n                   checkCondition={condition}\r\n            />\r\n\r\n            <Input title={'Max Value'}\r\n                   classNameInput={'inputMax'}\r\n                   onChangeCallback={onChangeHandlerMax}\r\n                   classNameBlock={'maxValue'}\r\n                   value={props.maxValue}\r\n                   setDisabled={props.setDisabled}\r\n                   checkCondition={condition}\r\n            />\r\n\r\n        </div>\r\n\r\n        <div className={'blockSettings'}>\r\n\r\n            <CleverButtons title={'Set'}\r\n                           disable={props.startValue === props.maxValue\r\n                           || props.startValue > props.maxValue\r\n                           || props.startValue < 0\r\n                           || props.maxValue < 0}\r\n                           onClickHandler={setCallback}/>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React from \"react\";\r\n\r\n\r\ntype WindowCounterPropsType = {\r\n    countValue:number\r\n    maxValue:number\r\n    startValue:number\r\n}\r\n\r\nexport const WindowCounter = React.memo( (props:WindowCounterPropsType) => {\r\n\r\n    const condition = props.startValue < 0 || props.startValue > props.maxValue || props.startValue === props.maxValue\r\n\r\n    return <div className={'blockValues window'}>\r\n        <span className={props.countValue < props.maxValue  ? 'startValue' : 'maxValue'}>{condition ? 'Incorrect Value' : props.countValue}</span>\r\n    </div>\r\n})","import React from \"react\";\r\nimport {CleverButtons} from \"./CleverButtons\";\r\nimport {WindowCounter} from \"./WindowCounter\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {incrementAC, resetAC} from \"../Redux/countReducer\";\r\n\r\ntype BlockWindowPropsType = {\r\n    disabled:boolean\r\n    startValue: number\r\n    maxValue:number\r\n    countValue:number\r\n}\r\n\r\nexport const BlockWindow = React.memo((props:BlockWindowPropsType) => {\r\n\r\n    const action = useDispatch()\r\n    const onClickHandlerInc = () => action(incrementAC())\r\n    const onClickHandlerRes = () => action(resetAC())\r\n\r\n    return <div className={'wrapper'}>\r\n\r\n        <WindowCounter startValue={props.startValue} countValue={props.countValue} maxValue={props.maxValue}/>\r\n\r\n        <div className={'blockSettings'}>\r\n\r\n            <CleverButtons title={'Inc'} disable={props.countValue >= props.maxValue || props.disabled} onClickHandler={onClickHandlerInc}/>\r\n            <CleverButtons title={'Res'} disable={props.countValue <= props.startValue || props.disabled} onClickHandler={onClickHandlerRes}/>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BlockSettings} from \"./components/BlockSettings\";\r\nimport {BlockWindow} from \"./components/BlockWindow\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStoreType} from \"./Redux/redux-store\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [disabled,setDisabled] = React.useState(false)\r\n\r\n    const countValue = useSelector<RootStoreType, number>(state => state.count.countValue)\r\n    const maxValue = useSelector<RootStoreType, number>(state => state.count.maxValue)\r\n    const startValue = useSelector<RootStoreType, number>(state => state.count.startValue)\r\n\r\n\r\n    return <div className={'App'}>\r\n        <BlockSettings setDisabled={setDisabled} startValue={startValue} maxValue={maxValue}/>\r\n        <BlockWindow disabled={disabled} startValue={startValue} maxValue={maxValue} countValue={countValue}/>\r\n    </div>\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport {countReducer} from \"./countReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    count:countReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/redux-store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}