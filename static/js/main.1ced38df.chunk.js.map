{"version":3,"sources":["Components/Block-Settings/Inputs.tsx","Components/WindowCounter/CleverButtons.tsx","Components/Block-Settings/Settings.tsx","Components/WindowCounter/Window.tsx","Components/WindowCounter/WindowCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Inputs","props","className","type","onChange","e","CleverButtons","Settings","Window","WindowCounter","App","useState","startValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAOO,SAASA,EAAOC,GAMnB,OAAO,yBAAKC,UAAW,cACnB,uCACA,2BAAOC,KAAK,SAAUC,SANF,SAACC,QCGdC,MANf,SAAuBL,GAEnB,OAAO,4BAAQC,UAAW,UAAnB,WCCJ,SAASK,EAASN,GAErB,OAAO,yBAAKC,UAAW,WACnB,yBAAKA,UAAW,qBAEZ,kBAACF,EAAD,MACA,kBAACA,EAAD,OAIJ,yBAAKE,UAAW,YACb,kBAAC,EAAD,QCTIM,MANf,SAAgBP,GACZ,OAAO,yBAAKC,UAAW,UACnB,uCCcOO,MAZf,SAAuBR,GACnB,OAAO,yBAAKC,UAAW,WACnB,kBAAC,EAAD,MAEA,yBAAKA,UAAW,YACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGGQ,MAbf,WAAgB,IAAD,EAEyBC,mBAAS,GAFlC,mBAEJC,EAFI,aAGqBD,mBAAS,IAH9B,gCAKeA,mBAASC,IALxB,mBAOX,OAPW,UAOJ,yBAAKV,UAAW,OACnB,kBAACK,EAAD,MACA,kBAAC,EAAD,QCFYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ced38df.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\n\ntype InputPropsType = {\n\n}\n\n\nexport function Inputs(props: InputPropsType) {\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\n    }\n\n    return <div className={'valueInput'}>\n        <span> dad </span>\n        <input type=\"number\"  onChange={onChangeHandler}/>\n    </div>\n\n}","import React from 'react';\n\ntype CleverButtonsPropsType = {\n\n}\n\nfunction CleverButtons(props: CleverButtonsPropsType) {\n\n    return <button className={'incRes'}> dada </button>\n\n}\n\nexport default CleverButtons;","import React from \"react\";\nimport {Inputs} from \"./Inputs\";\nimport CleverButtons from \"../WindowCounter/CleverButtons\";\n\n\ntype SettingsPropsType = {\n\n}\n\nexport function Settings(props: SettingsPropsType) {\n\n    return <div className={'wrapper'}>\n        <div className={'incReset settings'}>\n\n            <Inputs />\n            <Inputs />\n\n        </div>\n\n        <div className={'incReset'}>\n           <CleverButtons />\n        </div>\n    </div>\n}\n\n","import React from \"react\";\n\ntype WindowPropsType ={\n\n}\nfunction Window(props:WindowPropsType){\n    return <div className={'window'}>\n        <span > 1 </span>\n    </div>\n}\n\nexport default Window","import React from 'react';\nimport Window from \"./Window\";\nimport CleverButtons from './CleverButtons';\n\n\ntype WindowCounterPropsType = {\n\n}\n\nfunction WindowCounter(props: WindowCounterPropsType) {\n    return <div className={'wrapper'} >\n        <Window />\n\n        <div className={'incReset'}>\n            <CleverButtons />\n            <CleverButtons />\n        </div>\n\n    </div>\n}\n\nexport default WindowCounter","import React, {useState} from 'react';\nimport './App.css';\nimport {Settings} from \"./Components/Block-Settings/Settings\";\nimport WindowCounter from \"./Components/WindowCounter/WindowCounter\";\n\nfunction App() {\n\n    const [startValue, setStartValue] = useState(0) // значение инпута\n    const [maxValue, setMaxValue] = useState(0) // значение инпута\n\n    const [count, setCount] = useState(startValue) // сохранить как-то стартовое значение инпута\n\n    return <div className={'app'}>\n        <Settings />\n        <WindowCounter />\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}