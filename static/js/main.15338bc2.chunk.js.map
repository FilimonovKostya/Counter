{"version":3,"sources":["Components/Block-Settings/Inputs.tsx","Components/WindowCounter/CleverButtons.tsx","Components/Block-Settings/Settings.tsx","Components/WindowCounter/Window.tsx","Components/WindowCounter/WindowCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Inputs","props","className","title","type","checkValue","value","onChange","e","valueInput","currentTarget","CleverButtons","disabled","onClick","incAndRes","Settings","checkInputsValue","startValue","maxValue","setStartValue","setMaxValue","settings","Window","React","useState","error","count","WindowCounter","checkIncValue","checkResetValue","incNumber","resNumber","App","setCount","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.15338bc2.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\n\n\ntype InputPropsType = {\n    title: string\n    valueInput: (value: number) => void\n    value: number\n    checkValue:boolean\n}\n\n\nexport function Inputs(props: InputPropsType) {\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let valueInput = +e.currentTarget.value\n        props.valueInput(valueInput)\n    }\n\n    return <div className={'valueInput'}>\n        <span> {props.title} </span>\n        <input type=\"number\" className={props.checkValue ? 'error' : ''} value={props.value} onChange={onChangeHandler}/>\n    </div>\n\n}","import React from 'react';\nimport '../../App.css'\n\ntype CleverButtonsPropsType = {\n    incAndRes:() => void\n    title:string\n    startValue:number\n    maxValue:number\n    disabled:boolean\n}\n\nfunction CleverButtons(props: CleverButtonsPropsType) {\n\n    return <button className={props.disabled ? 'incRes error' : 'incRes'} disabled={props.disabled} onClick={props.incAndRes}> {props.title} </button>\n\n}\n\nexport default CleverButtons;\n","import React from \"react\";\nimport {Inputs} from \"./Inputs\";\nimport CleverButtons from \"../WindowCounter/CleverButtons\";\n\n\ntype SettingsPropsType = {\n    setStartValue: (startValue: number) => void\n    setMaxValue: (maxValue: number) => void\n    startValue: number\n    maxValue: number\n    settings: () => void\n}\n\nexport function Settings(props: SettingsPropsType) {\n\n    const checkInputsValue = props.startValue >= props.maxValue || props.startValue < 0 || props.maxValue < 0  // проверка условия чтобы\n\n    return <div className={'wrapper'}>\n        <div className={'incReset settings'}>\n\n            <Inputs title={'Start Value'}\n                    valueInput={props.setStartValue}\n                    value={props.startValue}\n                    checkValue={checkInputsValue}\n            />\n\n            <Inputs title={'Max Value'}\n                    valueInput={props.setMaxValue}\n                    value={props.maxValue}\n                    checkValue={checkInputsValue}\n            />\n\n        </div>\n\n        <div className={'incReset'}>\n            <CleverButtons title={'Set'}\n                           incAndRes={props.settings}\n                           maxValue={props.maxValue}\n                           startValue={props.startValue}\n                           disabled={props.startValue >= props.maxValue || props.startValue < 0}\n\n            />\n        </div>\n    </div>\n}\n\n","import React from \"react\";\n\ntype WindowPropsType = {\n    startValue: number\n    maxValue: number\n    count: number\n}\n\nfunction Window(props: WindowPropsType) {\n    const checkInputsValue = props.startValue >= props.maxValue || props.startValue < 0 || props.maxValue <= 0\n    const [error, setError] = React.useState('Incorrect')\n\n    return <div className={'window'}><span\n        className={props.count >= props.maxValue ? 'max' : ''}> {checkInputsValue ? error : props.count} </span>\n    </div>\n\n}\n\nexport default Window","import React from 'react';\nimport Window from \"./Window\";\nimport CleverButtons from './CleverButtons';\n\n\ntype WindowCounterPropsType = {\n    startValue: number\n    maxValue: number\n    incNumber: () => void\n    resNumber: () => void\n    count: number\n}\n\nfunction WindowCounter(props: WindowCounterPropsType) {\n    // const checkIncValue = props.count >= props.maxValue || props.startValue >= props.maxValue || props.startValue <= 0\n    // const checkResetValue = props.count <= props.startValue || props.startValue >= props.maxValue || props.maxValue <= 0\n\n    const checkIncValue = props.startValue < 0 || props.startValue >= props.maxValue || props.count >= props.maxValue\n    const checkResetValue = props.maxValue <= 0 || props.count <= props.startValue\n\n\n    return <div className={'wrapper'}>\n        <Window startValue={props.startValue} count={props.count} maxValue={props.maxValue}/>\n\n        <div className={'incReset'}>\n\n            <CleverButtons title={'Inc'}\n                           incAndRes={props.incNumber}\n                           disabled={checkIncValue}\n                           startValue={props.count}\n                           maxValue={props.maxValue}\n            />\n            <CleverButtons title={'Reset'}\n                           incAndRes={props.resNumber}\n                           disabled={checkResetValue}\n                           startValue={props.count}\n                           maxValue={props.maxValue}\n            />\n\n\n        </div>\n\n    </div>\n}\n\nexport default WindowCounter","import React, {useState} from 'react';\nimport './App.css';\nimport {Settings} from \"./Components/Block-Settings/Settings\";\nimport WindowCounter from \"./Components/WindowCounter/WindowCounter\";\n\nfunction App() {\n    const [startValue, setStartValue] = useState(0) // значение инпута\n    const [maxValue, setMaxValue] = useState(1) // значение инпута\n    const [count, setCount] = useState(startValue) // сохраняю стартовое значение инпута при нажатии set\n\n\n    const incNumber = () => count < maxValue && setCount(count + 1)\n\n    const resNumber = () => setCount(startValue)\n\n    const settings = () => setCount(startValue)\n\n    console.log(count)\n\n    return <div className={'app'}>\n\n        <Settings setStartValue={setStartValue}\n                  setMaxValue={setMaxValue}\n                  startValue={startValue}\n                  maxValue={maxValue}\n                  settings={settings}\n        />\n\n        <WindowCounter count={count}\n                       startValue={startValue}\n                       maxValue={maxValue}\n                       incNumber={incNumber}\n                       resNumber={resNumber}\n\n        />\n\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}